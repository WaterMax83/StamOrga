From 7fa7411c9421219e1151a746dd91cf3ea1139a11 Mon Sep 17 00:00:00 2001
From: Markus Schneider <MarkusSchneiderH@gmx.de>
Date: Wed, 5 Apr 2017 17:12:05 +0200
Subject: [PATCH] dailyChange

---
 Common/General/globalfunctions.cpp            |   2 +-
 Common/General/globalfunctions.h              |   2 +-
 Common/Network/messagecommand.h               |   3 +-
 StFaeKSC/Data/InputGames.csv                  |   5 +
 StFaeKSC/Data/games.cpp                       | 360 ++++++++++++++++++++++++++
 StFaeKSC/Data/games.h                         |  98 +++++++
 StFaeKSC/{General => Data}/listeduser.cpp     |   4 +-
 StFaeKSC/{General => Data}/listeduser.h       |   0
 StFaeKSC/Data/readdatacsv.cpp                 | 113 ++++++++
 StFaeKSC/Data/readdatacsv.h                   |  25 ++
 StFaeKSC/General/console.cpp                  |   8 +
 StFaeKSC/General/dataconnection.cpp           |  50 ++++
 StFaeKSC/General/dataconnection.h             |   1 +
 StFaeKSC/General/globaldata.h                 |   6 +-
 StFaeKSC/General/usercommand.h                |  81 +++++-
 StFaeKSC/Network/udpdataserver.cpp            |   4 +
 StFaeKSC/StFaeKSC.pro                         |  12 +-
 StamOrga/Android/StamOrga.pro                 |   8 +-
 StamOrga/Android/components/Games.qml         |  38 +++
 StamOrga/Android/images/+material/refresh.png | Bin 0 -> 682 bytes
 StamOrga/Android/images/refresh.png           | Bin 0 -> 391 bytes
 StamOrga/Android/main.cpp                     |  14 +-
 StamOrga/Android/main.qml                     | 135 +++++++++-
 StamOrga/Android/pages/UserLogin.qml          |  12 +-
 StamOrga/Android/pages/UserLoginForm.ui.qml   | 106 +-------
 StamOrga/Android/qml.qrc                      |   5 +
 StamOrga/Android/userinterface.cpp            |  21 +-
 StamOrga/Android/userinterface.h              |   8 +-
 StamOrga/ConnectionHandling.cpp               |  41 ++-
 StamOrga/Data/globaldata.cpp                  |  78 ++++++
 StamOrga/Data/globaldata.h                    | 135 ++++++++++
 StamOrga/PC/mainwindow.cpp                    |  24 +-
 StamOrga/PC/mainwindow.h                      |   3 +
 StamOrga/PC/mainwindow.ui                     |  16 ++
 StamOrga/connectionhandling.h                 |  11 +-
 StamOrga/dataconnection.cpp                   |  39 ++-
 StamOrga/dataconnection.h                     |   6 +-
 StamOrga/datahandling.cpp                     |  65 ++++-
 StamOrga/datahandling.h                       |   7 +-
 StamOrga/globaldata.cpp                       |  22 ++
 StamOrga/globaldata.h                         |  35 ++-
 StamOrga/mainconnection.h                     |   2 +-
 42 files changed, 1442 insertions(+), 163 deletions(-)
 create mode 100644 StFaeKSC/Data/InputGames.csv
 create mode 100644 StFaeKSC/Data/games.cpp
 create mode 100644 StFaeKSC/Data/games.h
 rename StFaeKSC/{General => Data}/listeduser.cpp (99%)
 rename StFaeKSC/{General => Data}/listeduser.h (100%)
 create mode 100644 StFaeKSC/Data/readdatacsv.cpp
 create mode 100644 StFaeKSC/Data/readdatacsv.h
 create mode 100644 StamOrga/Android/components/Games.qml
 create mode 100644 StamOrga/Android/images/+material/refresh.png
 create mode 100644 StamOrga/Android/images/refresh.png
 create mode 100644 StamOrga/Data/globaldata.cpp
 create mode 100644 StamOrga/Data/globaldata.h

diff --git a/Common/General/globalfunctions.cpp b/Common/General/globalfunctions.cpp
index ceb45df..ffcd2d9 100644
--- a/Common/General/globalfunctions.cpp
+++ b/Common/General/globalfunctions.cpp
@@ -51,7 +51,7 @@ QString getErrorCodeString(qint32 code)
         return QString("Wrong data size: %1").arg(code);
     case ERROR_CODE_TIMEOUT:
         return QString("No answer, timeout: %1").arg(code);
-    case ERROOR_CODE_ERR_SEND:
+    case ERROR_CODE_ERR_SEND:
         return QString("Error sending data: %1").arg(code);
     case ERROR_CODE_NO_ANSWER:
         return QString("Did not get an answer: %1").arg(code);
diff --git a/Common/General/globalfunctions.h b/Common/General/globalfunctions.h
index b73483e..6f13679 100644
--- a/Common/General/globalfunctions.h
+++ b/Common/General/globalfunctions.h
@@ -34,7 +34,7 @@ extern bool checkFilePathExistAndCreate(const QString &path);
 #define ERROR_CODE_COMMON           -1
 #define ERROR_CODE_WRONG_SIZE       -2
 #define ERROR_CODE_TIMEOUT          -3
-#define ERROOR_CODE_ERR_SEND        -4
+#define ERROR_CODE_ERR_SEND        -4
 #define ERROR_CODE_NO_ANSWER        -5
 #define ERROR_CODE_NO_CONNECT       -6
 #define ERROR_CODE_NO_USER          -20
diff --git a/Common/Network/messagecommand.h b/Common/Network/messagecommand.h
index 192d75e..1aaa44d 100644
--- a/Common/Network/messagecommand.h
+++ b/Common/Network/messagecommand.h
@@ -9,7 +9,7 @@ enum OP_CODE_CMD_REQ
     REQ_GET_USER_PROPS      = 0x00040001,
     REQ_USER_CHANGE_LOGIN   = 0x00080001,
     REQ_GET_VERSION         = 0x00030002,
-
+    REQ_GET_GAMES_LIST      = 0x00010004,
 };
 
 enum OP_CODE_CMD_RES
@@ -19,6 +19,7 @@ enum OP_CODE_CMD_RES
     ACK_GET_USER_PROPS      = 0x10040001,
     ACK_USER_CHANGE_LOGIN   = 0x10080001,
     ACK_GET_VERSION         = 0x10030002,
+    ACK_GET_GAMES_LIST      = 0x10010004,
     ACK_NOT_LOGGED_IN       = 0x1F00FFFF,
 };
 
diff --git a/StFaeKSC/Data/InputGames.csv b/StFaeKSC/Data/InputGames.csv
new file mode 100644
index 0000000..2ece713
--- /dev/null
+++ b/StFaeKSC/Data/InputGames.csv
@@ -0,0 +1,5 @@
+GAMES
+25;1;19.03.2017 13:30;KSC;Fortuna Düsseldorf;0:3
+26;1;31.03.2017 18:30;1.FC Nürnberg;KSC;2:1
+27;1;04.04.2017 17:30;KSC;FC Würzburger Kickers
+28;1;09.04.2017 13:30;VFB Stuttgart;KSC
\ No newline at end of file
diff --git a/StFaeKSC/Data/games.cpp b/StFaeKSC/Data/games.cpp
new file mode 100644
index 0000000..97052df
--- /dev/null
+++ b/StFaeKSC/Data/games.cpp
@@ -0,0 +1,360 @@
+#include <QtCore/QCoreApplication>
+#include <QtCore/QSettings>
+#include <QtCore/QDateTime>
+
+#include <iostream>
+
+#include "games.h"
+#include "../Common/General/globalfunctions.h"
+
+Games::Games()
+{
+    QString gamesSetFilePath = getUserHomeConfigPath() + "/Settings/Games.ini";
+
+    if (!checkFilePathExistAndCreate(gamesSetFilePath))
+    {
+        CONSOLE_CRITICAL(QString("Could not create File for Games setting"));
+        return;
+    }
+
+    this->m_pGamesSettings = new QSettings(gamesSetFilePath, QSettings::IniFormat);
+
+    /* Check wheter we have to save data after reading again */
+    bool bProblems = false;
+    {
+        QMutexLocker locker(&this->m_mGamesIniMutex);
+
+        this->m_pGamesSettings->beginGroup(GAMES_GROUP);
+        int sizeOfGames = this->m_pGamesSettings->beginReadArray(PLAY_ARRAY);
+
+        for (int i=0; i<sizeOfGames; i++ ) {
+            this->m_pGamesSettings->setArrayIndex(i);
+            QString home = this->m_pGamesSettings->value(PLAY_HOME, "").toString();
+            QString away = this->m_pGamesSettings->value(PLAY_AWAY, "").toString();
+            qint64 datetime = this->m_pGamesSettings->value(PLAY_DATETIME, 0x0).toULongLong();
+            quint8 saisonIndex = quint8(this->m_pGamesSettings->value(PLAY_SAISON_INDEX, 0).toUInt());
+            QString score = this->m_pGamesSettings->value(PLAY_SCORE, "").toString();
+            quint8 competition = quint8(this->m_pGamesSettings->value(PLAY_COMPETITION, 0).toUInt());
+            quint32 index = this->m_pGamesSettings->value(PLAY_INDEX, 0).toInt();
+            if (!this->addNewGamesPlay(home, away, datetime, saisonIndex, score, competition, index))
+                bProblems = true;
+        }
+        this->m_pGamesSettings->endArray();
+        this->m_pGamesSettings->endGroup();
+    }
+
+
+    for (int i=0; i<this->m_lAddGamesPlayProblems.size(); i++)
+    {
+        bProblems = true;
+        this->m_lAddGamesPlayProblems[i].index = this->getNextGameIndex();
+        this->addNewGamesPlay(this->m_lAddGamesPlayProblems[i].home, this->m_lAddGamesPlayProblems[i].away,
+                              this->m_lAddGamesPlayProblems[i].datetime, this->m_lAddGamesPlayProblems[i].saisonIndex,
+                              this->m_lAddGamesPlayProblems[i].score, this->m_lAddGamesPlayProblems[i].competition,
+                              this->m_lAddGamesPlayProblems[i].index);
+    }
+
+    if (bProblems)
+        this->saveActualGamesList();
+
+    this->sortGamesListByTime();
+}
+
+int Games::addNewGame(QString home, QString away, qint64 datetime, quint8 sIndex, QString score, quint8 comp)
+{
+    if (sIndex == 0 || comp == 0) {
+        qWarning().noquote() << "Could not add game because saisonIndex or competition were zero";
+        return ERROR_CODE_COMMON;
+    }
+
+    GamesPlay *pGame;
+    if ((pGame = this->gameExists(sIndex, comp)) != NULL) {
+        CONSOLE_INFO (QString("Game \"%1\" already exists, updating info").arg(sIndex + ":" + comp));
+
+        QMutexLocker locker(&this->m_mGamesListMutex);
+
+        if (pGame->home != home) {
+            if (this->updateGamesPlayValue(pGame, PLAY_HOME, QVariant(home)))
+                pGame->home = home;
+        }
+        if (pGame->away != away) {
+            if (this->updateGamesPlayValue(pGame, PLAY_AWAY, QVariant(away)))
+                pGame->away = away;
+        }
+        if (pGame->datetime != datetime) {
+            if (this->updateGamesPlayValue(pGame, PLAY_DATETIME, QVariant(datetime))) {
+                pGame->datetime = datetime;
+            }
+        }
+        if (pGame->score != score) {
+            if (this->updateGamesPlayValue(pGame, PLAY_SCORE, QVariant(score)))
+                pGame->score = score;
+        }
+
+        return pGame->index;
+    }
+
+    QMutexLocker locker(&this->m_mGamesIniMutex);
+
+
+    int newIndex = this->getNextGameIndex();
+    this->m_pGamesSettings->beginGroup(GAMES_GROUP);
+    this->m_pGamesSettings->beginWriteArray(PLAY_ARRAY);
+    this->m_pGamesSettings->setArrayIndex(this->getNumberOfGames());
+    this->m_pGamesSettings->setValue(PLAY_HOME, home);
+    this->m_pGamesSettings->setValue(PLAY_AWAY, away);
+    this->m_pGamesSettings->setValue(PLAY_DATETIME, datetime);
+    this->m_pGamesSettings->setValue(PLAY_SAISON_INDEX, sIndex);
+    this->m_pGamesSettings->setValue(PLAY_SCORE, score);
+    this->m_pGamesSettings->setValue(PLAY_COMPETITION, comp);
+    this->m_pGamesSettings->setValue(PLAY_INDEX, newIndex);
+    this->m_pGamesSettings->endArray();
+    this->m_pGamesSettings->endGroup();
+    this->m_pGamesSettings->sync();
+
+    this->addNewGamesPlay(home, away, datetime, sIndex, score, comp, newIndex, false);
+
+    CONSOLE_INFO(QString("Added new game: %1").arg(home + " : " + away));
+    return newIndex;
+}
+
+//int ListedUser::removeUser(const QString &name)
+//{
+//    int index = this->getUserLoginIndex(name);
+//    if (index < 0 || index > this->m_lUserLogin.size() - 1)
+//    {
+//        CONSOLE_WARNING(QString("Could not find user \"%1\"").arg(name));
+//        return -1;
+//    }
+
+//    QMutexLocker locker(&this->m_mUserListMutex);
+
+//    this->m_lUserLogin.removeAt(index);
+
+//    this->saveActualUserList();
+
+//    CONSOLE_INFO(QString("removed User \"%1\"").arg(name));
+//    return 0;
+//}
+
+int Games::showAllGames()
+{
+    QMutexLocker locker(&this->m_mGamesListMutex);
+
+    foreach (GamesPlay play, this->m_lGamesPlay) {
+        QString date = QDateTime::fromMSecsSinceEpoch(play.datetime).toString("dd.MM.yyyy hh:mm");
+        QString output;
+        if (play.score.size() > 0)
+            output = QString("%1: %2 - %3 %4 - %5 = %6").arg(play.saisonIndex).arg(play.competition).arg(date, play.home, play.away, play.score);
+        else
+            output = QString("%1: %2 - %3 %4 - %5").arg(play.saisonIndex).arg(play.competition).arg(date, play.home, play.away);
+        std::cout << output.toStdString() << std::endl;
+    }
+    return 0;
+}
+
+void Games::saveActualGamesList()
+{
+    QMutexLocker locker(&this->m_mGamesIniMutex);
+
+    this->m_pGamesSettings->beginGroup(GAMES_GROUP);
+    this->m_pGamesSettings->remove("");              // clear all elements
+
+    this->m_pGamesSettings->beginWriteArray(PLAY_ARRAY);
+    for (int i=0; i<this->m_lGamesPlay.size(); i++) {
+        this->m_pGamesSettings->setArrayIndex(i);
+        this->m_pGamesSettings->setValue(PLAY_HOME, this->m_lGamesPlay[i].home);
+        this->m_pGamesSettings->setValue(PLAY_ARRAY, this->m_lGamesPlay[i].away);
+        this->m_pGamesSettings->setValue(PLAY_DATETIME, this->m_lGamesPlay[i].datetime);
+        this->m_pGamesSettings->setValue(PLAY_SAISON_INDEX, this->m_lGamesPlay[i].saisonIndex);
+        this->m_pGamesSettings->setValue(PLAY_SCORE, this->m_lGamesPlay[i].score);
+        this->m_pGamesSettings->setValue(PLAY_COMPETITION, this->m_lGamesPlay[i].competition);
+        this->m_pGamesSettings->setValue(PLAY_INDEX, this->m_lGamesPlay[i].index);
+    }
+
+    this->m_pGamesSettings->endArray();
+    this->m_pGamesSettings->endGroup();
+
+    qDebug().noquote() << QString("saved actual Games List with %1 entries").arg(this->m_lGamesPlay.size());
+}
+
+GamesPlay *Games::gameExists(quint8 sIndex, quint8 comp)
+{
+    QMutexLocker locker(&this->m_mGamesListMutex);
+
+    for (int i=0; i<this->m_lGamesPlay.size(); i++) {
+        if (this->m_lGamesPlay[i].saisonIndex == sIndex && this->m_lGamesPlay[i].competition == comp)
+            return &this->m_lGamesPlay[i];
+    }
+    return NULL;
+}
+
+bool Games::gameExists(quint32 index)
+{
+    QMutexLocker locker(&this->m_mGamesListMutex);
+
+    foreach (GamesPlay play, this->m_lGamesPlay) {
+        if (play.index == index)
+            return true;
+    }
+    return false;
+}
+
+//bool ListedUser::userCheckPassword(QString name, QString passw)
+//{
+//    QMutexLocker locker(&this->m_mUserListMutex);
+
+//    if (name.length() < MIN_SIZE_USERNAME)
+//        return false;
+
+//    foreach (UserLogin login, this->m_lUserLogin) {
+//        if (login.userName == name) {
+//            if (login.password == passw)
+//                return true;
+//            return false;
+//        }
+//    }
+//    return false;
+//}
+
+//bool ListedUser::userChangePassword(QString name, QString passw)
+//{
+//    QMutexLocker locker(&this->m_mUserListMutex);
+
+//    if (name.length() < MIN_SIZE_USERNAME)
+//        return false;
+
+//    for (int i=0; i<this->m_lUserLogin.size(); i++) {
+//        if (this->m_lUserLogin[i].userName == name) {
+//            if (this->updateUserLoginValue(&this->m_lUserLogin[i], LOGIN_PASSWORD, QVariant(passw))) {
+//                this->m_lUserLogin[i].password = passw;
+//                return true;
+//            }
+//        }
+//    }
+//    return false;
+//}
+
+//bool ListedUser::userChangeProperties(QString name, quint32 props)
+//{
+//    QMutexLocker locker(&this->m_mUserListMutex);
+
+//    if (name.length() < MIN_SIZE_USERNAME)
+//        return false;
+
+//    for (int i=0; i<this->m_lUserLogin.size(); i++) {
+//        if (this->m_lUserLogin[i].userName == name) {
+//            if (this->updateUserLoginValue(&this->m_lUserLogin[i], LOGIN_PROPERTIES, QVariant(props))) {
+//                this->m_lUserLogin[i].properties = props;
+//                return true;
+//            } else
+//                return false;
+//        }
+//    }
+//    return false;
+//}
+
+//quint32 ListedUser::getUserProperties(QString name)
+//{
+//    QMutexLocker locker(&this->m_mUserListMutex);
+
+//    foreach (UserLogin login, this->m_lUserLogin) {
+//        if (login.userName == name)
+//            return login.properties;
+//    }
+//    return 0;
+//}
+
+//bool ListedUser::addNewUserLogin(QString name, QString password, quint32 prop, quint32 index, bool checkUser)
+bool Games::addNewGamesPlay(QString home, QString away, qint64 datetime, quint8 sIndex, QString score, quint8 comp, quint32 index, bool checkGame)
+{
+    if (checkGame) {
+        if (sIndex == 0 || comp == 0) {
+            qWarning().noquote() << "Could not add game because saisonIndex or competition were zero";
+            return false;
+        }
+        if (index == 0 || gameExists(index)) {
+            qWarning().noquote() << QString("Game \"%1\" with index \"%2\" already exists, saving with new index").arg(home + " - " + away).arg(index);
+            this->addNewGamesPlay(home, away, datetime, sIndex, score, comp, index, &this->m_lAddGamesPlayProblems);
+            return false;
+        }
+    }
+
+    this->addNewGamesPlay(home, away, datetime, sIndex, score, comp, index, &this->m_lGamesPlay);
+    return true;
+}
+
+void Games::addNewGamesPlay(QString home, QString away, qint64 datetime, quint8 sIndex, QString score, quint8 comp, quint32 index, QList<GamesPlay> *pList)
+{
+    QMutexLocker locker(&this->m_mGamesListMutex);
+
+    GamesPlay play;
+    play.home = home;
+    play.away = away;
+    play.datetime = datetime;
+    play.saisonIndex = sIndex;
+    play.score = score;
+    play.competition = comp;
+    play.index = index;
+    pList->append(play);
+}
+
+//quint32 ListedUser::getUserLoginIndex(const QString &name)
+//{
+//    QMutexLocker locker(&this->m_mUserListMutex);
+
+//    for (int i=0; i<this->m_lUserLogin.size(); i++) {
+//        if (this->m_lUserLogin[i].userName == name)
+//            return i;
+//    }
+//    return -1;
+//}
+
+quint32 Games::getNextGameIndex()
+{
+    QMutexLocker locker(&this->m_mGamesListMutex);
+
+    quint32 index = 0;
+    for (int i=0; i<this->m_lGamesPlay.size(); i++) {
+        if (this->m_lGamesPlay[i].index > index)
+            index = this->m_lGamesPlay[i].index;
+    }
+    return index+1;
+}
+
+bool Games::updateGamesPlayValue(GamesPlay *pGame, QString key, QVariant value)
+{
+    bool rValue = false;
+    QMutexLocker locker(&this->m_mGamesIniMutex);
+
+    this->m_pGamesSettings->beginGroup(GAMES_GROUP);
+    int arrayCount = this->m_pGamesSettings->beginReadArray(PLAY_ARRAY);
+    for (int i=0; i<arrayCount; i++) {
+        this->m_pGamesSettings->setArrayIndex(i);
+        quint32 actIndex = this->m_pGamesSettings->value(PLAY_INDEX, 0).toInt();
+        if (pGame->index == actIndex) {
+
+            this->m_pGamesSettings->setValue(key, value);
+            qInfo().noquote() << QString("Change %1 of game %2:%3 to %4").arg(key, pGame->saisonIndex, pGame->competition).arg(value.toString());
+            rValue = true;
+            break;
+        }
+    }
+    this->m_pGamesSettings->endArray();
+    this->m_pGamesSettings->endGroup();
+    return rValue;
+}
+
+void Games::sortGamesListByTime()
+{
+    QMutexLocker locker(&this->m_mGamesListMutex);
+
+    std::sort(this->m_lGamesPlay.begin(), this->m_lGamesPlay.end(), GamesPlay::compareDateTimeFunction);
+}
+
+
+Games::~Games()
+{
+    if (this->m_pGamesSettings != NULL)
+        delete this->m_pGamesSettings;
+}
diff --git a/StFaeKSC/Data/games.h b/StFaeKSC/Data/games.h
new file mode 100644
index 0000000..cdc3021
--- /dev/null
+++ b/StFaeKSC/Data/games.h
@@ -0,0 +1,98 @@
+#ifndef GAMES_H
+#define GAMES_H
+
+
+#include <QtCore/QSettings>
+#include <QtCore/QList>
+#include <QtCore/QMutex>
+
+struct GamesPlay {
+    QString home;
+    QString away;
+    qint64 datetime;
+    quint8 saisonIndex;
+    quint8 competition;
+    QString score;
+    quint32 index;
+
+    static bool compareDateTimeFunction(GamesPlay p1, GamesPlay p2)
+    {
+        if (p1.datetime > p2.datetime)
+            return false;
+        return true;
+    }
+};
+
+#define GAMES_GROUP             "GAMES"
+#define PLAY_ARRAY              "play"
+#define PLAY_HOME               "home"
+#define PLAY_AWAY               "away"
+#define PLAY_DATETIME           "datetime"
+#define PLAY_SAISON_INDEX       "sIndex"
+#define PLAY_INDEX              "index"
+#define PLAY_SCORE              "score"
+#define PLAY_COMPETITION        "competition"
+
+//#define DEFAULT_LOGIN_PROPS     0x0
+
+//#define MIN_SIZE_USERNAME       5
+
+class Games
+{
+public:
+    Games();
+    ~Games();
+
+    int addNewGame(QString home, QString away, qint64 datetime, quint8 sIndex, QString score, quint8 comp);
+//    int removeUser(const QString &name);
+    int showAllGames();
+
+    quint16 getNumberOfGames() { return this->m_lGamesPlay.size(); }
+
+    GamesPlay *gameExists(quint8 sIndex, quint8 comp);
+    bool gameExists(quint32 index);
+
+    quint16 startRequestGetGamesPlay()
+    {
+        this->m_mGamesListMutex.lock();
+        return this->getNumberOfGames();
+    }
+
+    GamesPlay *getRequestGamesPlay(int index)
+    {
+        if (index < this->m_lGamesPlay.size())
+            return &this->m_lGamesPlay[index];
+        return NULL;
+    }
+
+    void stopRequestGetGamesPlay()
+    {
+        this->m_mGamesListMutex.unlock();
+    }
+
+    void sortGamesListByTime();
+//    bool userCheckPassword(QString name, QString passw);
+//    bool userChangePassword(QString name, QString passw);
+//    bool userChangeProperties(QString name, quint32 props);
+//    quint32 getUserProperties(QString name);
+
+private:
+    QSettings           *m_pGamesSettings = NULL;
+    QList<GamesPlay>    m_lGamesPlay;
+    QMutex              m_mGamesIniMutex;
+    QMutex              m_mGamesListMutex;
+
+    QList<GamesPlay>    m_lAddGamesPlayProblems;
+
+    void saveActualGamesList();
+
+    bool addNewGamesPlay(QString home, QString away, qint64 datetime, quint8 sIndex, QString score, quint8 comp, quint32 index, bool checkGame = true);
+    void addNewGamesPlay(QString home, QString away, qint64 datetime, quint8 sIndex, QString score, quint8 comp, quint32 index, QList<GamesPlay> *pList);
+//    quint32 getUserLoginIndex(const QString &name);
+    quint32 getNextGameIndex();
+
+    bool updateGamesPlayValue(GamesPlay *pGame, QString key, QVariant value);
+
+};
+
+#endif // GAMES_H
diff --git a/StFaeKSC/General/listeduser.cpp b/StFaeKSC/Data/listeduser.cpp
similarity index 99%
rename from StFaeKSC/General/listeduser.cpp
rename to StFaeKSC/Data/listeduser.cpp
index 9c2d04b..b4331fa 100644
--- a/StFaeKSC/General/listeduser.cpp
+++ b/StFaeKSC/Data/listeduser.cpp
@@ -30,8 +30,8 @@ ListedUser::ListedUser()
             this->m_pUserSettings->setArrayIndex(i);
             QString name = this->m_pUserSettings->value(LOGIN_USERNAME, "").toString();
             QString passw = this->m_pUserSettings->value(LOGIN_PASSWORD, "").toString();
-            quint32 prop = this->m_pUserSettings->value(LOGIN_PROPERTIES, 0x0).toInt();
-            quint32 index = this->m_pUserSettings->value(LOGIN_INDEX, 0).toInt();
+            quint32 prop = this->m_pUserSettings->value(LOGIN_PROPERTIES, 0x0).toUInt();
+            quint32 index = this->m_pUserSettings->value(LOGIN_INDEX, 0).toUInt();
             if (!this->addNewUserLogin(name, passw, prop, index))
                 bProblems = true;
         }
diff --git a/StFaeKSC/General/listeduser.h b/StFaeKSC/Data/listeduser.h
similarity index 100%
rename from StFaeKSC/General/listeduser.h
rename to StFaeKSC/Data/listeduser.h
diff --git a/StFaeKSC/Data/readdatacsv.cpp b/StFaeKSC/Data/readdatacsv.cpp
new file mode 100644
index 0000000..1717936
--- /dev/null
+++ b/StFaeKSC/Data/readdatacsv.cpp
@@ -0,0 +1,113 @@
+#include <QtCore/QFile>
+#include <QtCore/QDateTime>
+
+
+#include "readdatacsv.h"
+#include "../Common/General/globalfunctions.h"
+
+ReadDataCSV::ReadDataCSV(GlobalData *pGlobalData)
+{
+    this->m_pGlobalData = pGlobalData;
+}
+
+
+enum CSV_IMPORT_GROUP {
+    NOTHING = 0,
+    USER = 1,
+    GAME = 2
+};
+
+int ReadDataCSV::readNewCSVData(QString path)
+{
+    QFile csvFile(path);
+
+    if (!csvFile.exists()) {
+        CONSOLE_CRITICAL(QString("CSV File %1 does not exist").arg(path));
+        return -1;
+    }
+
+    if (!csvFile.open(QIODevice::ReadOnly)) {
+        CONSOLE_CRITICAL(QString("Could not open file %1: %2").arg(path).arg(csvFile.errorString()));
+        return -1;
+    }
+
+    CSV_IMPORT_GROUP actGroup = CSV_IMPORT_GROUP::NOTHING;
+    while (!csvFile.atEnd()) {
+        QByteArray aline = csvFile.readLine();
+        QString line(aline);
+
+        if (line.trimmed() == "GAMES")
+            actGroup = CSV_IMPORT_GROUP::GAME;
+        else if (line.trimmed() == "USER")
+            actGroup = CSV_IMPORT_GROUP::USER;
+        else {
+            QStringList lline = line.trimmed().split(";");
+
+            switch(actGroup) {
+            case CSV_IMPORT_GROUP::GAME:
+                this->readNewGameData(lline);
+                break;
+
+            case CSV_IMPORT_GROUP::USER:
+                this->readNewUserData(lline);
+                break;
+
+            default:
+                break;
+            }
+
+        }
+    }
+    return 0;
+}
+
+int ReadDataCSV::readNewGameData(QStringList line)
+{
+    bool ok;
+    quint8 sIndex;
+    if (line.size() > 0) {
+        sIndex = line.value(0).toUShort(&ok);
+        if (!ok) {
+            qWarning().noquote() << QString("Could not read %1 as integer value").arg(line.value(0));
+            return ERROR_CODE_COMMON;
+        }
+    }
+
+    quint8 competition;
+    if (line.size() > 1) {
+        competition = line.value(1).toUShort(&ok);
+        if (!ok) {
+            qWarning().noquote() << QString("Could not read %1 as integer value").arg(line.value(1));
+            return ERROR_CODE_COMMON;
+        }
+    }
+
+    qint64 datetime;
+    if (line.size() > 2) {
+        QDateTime time = QDateTime::fromString(line.value(2), "dd.MM.yyyy hh:mm");
+        datetime = time.toMSecsSinceEpoch();
+    }
+
+    QString home;
+    if (line.size() > 3)
+        home = line.value(3);
+
+    QString away;
+    if (line.size() > 4)
+        away = line.value(4);
+
+    QString score;
+    if (line.size() > 5)
+        score = line.value(5);
+
+    this->m_pGlobalData->m_GamesList.addNewGame(home, away, datetime, sIndex, score, competition);
+    this->m_pGlobalData->m_GamesList.sortGamesListByTime();
+
+    return ERROR_CODE_SUCCESS;
+}
+
+int ReadDataCSV::readNewUserData(QStringList line)
+{
+
+    return 0;
+}
diff --git a/StFaeKSC/Data/readdatacsv.h b/StFaeKSC/Data/readdatacsv.h
new file mode 100644
index 0000000..0ca7e54
--- /dev/null
+++ b/StFaeKSC/Data/readdatacsv.h
@@ -0,0 +1,25 @@
+#ifndef READDATACSV_H
+#define READDATACSV_H
+
+
+#include <QtCore/QString>
+
+#include "../General/globaldata.h"
+
+
+class ReadDataCSV
+{
+public:
+    ReadDataCSV(GlobalData *pGlobalData);
+
+    int readNewCSVData(QString path);
+
+private:
+    GlobalData  *m_pGlobalData;
+
+
+    int readNewGameData(QStringList line);
+    int readNewUserData(QStringList line);
+};
+
+#endif // READDATACSV_H
diff --git a/StFaeKSC/General/console.cpp b/StFaeKSC/General/console.cpp
index 651aa6d..07889e4 100644
--- a/StFaeKSC/General/console.cpp
+++ b/StFaeKSC/General/console.cpp
@@ -57,6 +57,12 @@ void Console::readCommand()
         else if (qLine == "user" || qLine.left(5) == "user ") {
             UserCommand::runUserCommand(qLine, &this->m_pGlobalData->m_UserList);
         }
+        else if (qLine == "game" || qLine.left(5) == "game ") {
+            UserCommand::runGameCommand(qLine, &this->m_pGlobalData->m_GamesList);
+        }
+        else if (qLine == "read" || qLine.left(5) == "read ") {
+            UserCommand::runReadCommand(qLine, this->m_pGlobalData);
+        }
         else if (qLine == "log" || qLine.left(4) == "log ") {
             UserCommand::runLoggingCommand(qLine);
 
@@ -78,6 +84,8 @@ void Console::printHelp()
     std::cout << "Known commands are:" << std::endl;
     std::cout << "help:\t\t"   << "Show this info" << std::endl;
     std::cout << "user:\t\t"   << "use the user command" << std::endl;
+    std::cout << "game:\t\t"   << "use the game command" << std::endl;
+    std::cout << "read %PATH%:\t"   << "read a new file in csv file format" << std::endl;
     std::cout << "log %i:\t\t"   << "show the last user log" << std::endl;
     std::cout << "exit:\t\t"   << "exit the program" << std::endl;
     std::cout << "quit:\t\t"   << "exit the program" << std::endl;
diff --git a/StFaeKSC/General/dataconnection.cpp b/StFaeKSC/General/dataconnection.cpp
index 7c3a5c5..88bacde 100644
--- a/StFaeKSC/General/dataconnection.cpp
+++ b/StFaeKSC/General/dataconnection.cpp
@@ -107,3 +107,53 @@ MessageProtocol *DataConnection::requestGetProgramVersion(MessageProtocol *msg)
     ownVersion.append(QString(STAM_ORGA_VERSION_S));
     return new MessageProtocol(OP_CODE_CMD_RES::ACK_GET_VERSION, ownVersion);
 }
+
+
+/*
+ * 0                Header          12
+ * 12   quint32     result          4
+ * 16   quint16     totalSize       2
+ * 18   quint16     sizePack1       2
+ * 20   quint16     version         2
+ * 22   quint8      sIndex          1
+ * 23   quint8      comp            1
+ * 24   quint64     datetime        8
+ * 32   QString     infoGame        X
+ * 32+X qutin16     sizePack2       2
+ */
+
+#define GAMES_OFFSET    2 + 1 + 1 + 8           // version + sIndex + comp + datetime
+
+MessageProtocol *DataConnection::requestGetGamesList(MessageProtocol *msg)
+{
+    QByteArray ackArray;
+    QDataStream wAckArray(&ackArray, QIODevice::WriteOnly);
+    wAckArray.setByteOrder(QDataStream::BigEndian);
+
+    quint16 numbOfGames = this->m_pGlobalData->m_GamesList.startRequestGetGamesPlay();
+    wAckArray << (quint32)ERROR_CODE_SUCCESS << numbOfGames;
+
+    for (quint32 i=0; i<numbOfGames; i++) {
+        GamesPlay *pGame = this->m_pGlobalData->m_GamesList.getRequestGamesPlay(i);
+        if (pGame == NULL)
+            continue;
+
+        QString game(pGame->home + ";" + pGame->away +  ";" + pGame->score);
+
+
+        wAckArray.device()->seek(ackArray.size());
+        wAckArray << quint16(game.toUtf8().size() + GAMES_OFFSET);
+        wAckArray << quint16(0x1);                                      //Version
+        wAckArray << quint8(pGame->saisonIndex);
+        wAckArray << quint8(pGame->competition);
+        wAckArray << pGame->datetime;
+
+        ackArray.append(game);
+    }
+
+
+    this->m_pGlobalData->m_GamesList.stopRequestGetGamesPlay();
+
+    return new MessageProtocol(OP_CODE_CMD_RES::ACK_GET_GAMES_LIST, ackArray);
+
+}
diff --git a/StFaeKSC/General/dataconnection.h b/StFaeKSC/General/dataconnection.h
index eb96710..6197504 100644
--- a/StFaeKSC/General/dataconnection.h
+++ b/StFaeKSC/General/dataconnection.h
@@ -17,6 +17,7 @@ public:
     MessageProtocol *requestGetUserProperties();
     MessageProtocol *requestUserChangeLogin(MessageProtocol *msg);
     MessageProtocol *requestGetProgramVersion(MessageProtocol *msg);
+    MessageProtocol *requestGetGamesList(MessageProtocol *msg);
 
     void setUserConnectionData(UserConData * pUsrConData) { this->m_pUserConData = pUsrConData; }
 
diff --git a/StFaeKSC/General/globaldata.h b/StFaeKSC/General/globaldata.h
index 7c4e34e..2bf6616 100644
--- a/StFaeKSC/General/globaldata.h
+++ b/StFaeKSC/General/globaldata.h
@@ -1,7 +1,8 @@
 #ifndef GLOBALDATA_H
 #define GLOBALDATA_H
 
-#include "listeduser.h"
+#include "../Data/listeduser.h"
+#include "../Data/games.h"
 
 class GlobalData
 {
@@ -9,6 +10,9 @@ public:
     GlobalData();
 
     ListedUser m_UserList;
+
+    Games   m_GamesList;
+
 };
 
 #endif // GLOBALDATA_H
diff --git a/StFaeKSC/General/usercommand.h b/StFaeKSC/General/usercommand.h
index 1adc721..f3a78f3 100644
--- a/StFaeKSC/General/usercommand.h
+++ b/StFaeKSC/General/usercommand.h
@@ -6,7 +6,8 @@
 
 #include <iostream>
 
-#include "listeduser.h"
+#include "../General/globaldata.h"
+#include "../Data/readdatacsv.h"
 #include "../Common/General/logging.h"
 
 class UserCommand
@@ -65,6 +66,56 @@ public:
         return showLoggingInfo(5);
     }
 
+    static int runGameCommand(const QString &cmd, Games *pGames)
+    {
+        QStringList list = cmd.split(' ');
+        if (list.size() < 2 || list.value(0) != "game")
+            return ShowGamesCommandHelp();
+
+        /*if (list.value(1) == "add" && list.size() == 3)
+            return pUsers->addNewUser(list.value(2));
+        else if (list.value(1) == "remove" && list.size() == 3)
+            return pUsers->removeUser(list.value(2));
+        else if (list.value(1) == "change" && list.size() == 4) {
+            if (pUsers->userExists(list.value(2))) {
+                if (pUsers->userChangePassword(list.value(2), list.value(3)))
+                    std::cout << "Changed password from user " << list.value(2).toStdString() << std::endl;
+                else
+                    std::cout << QString("Error changing password %2 from user %1").arg(list.value(3), list.value(2)).toStdString();
+                return 0;
+            } else {
+                std::cout << "User " << list.value(2).toStdString() << " does not exist" << std::endl;
+            }
+        } else if (list.value(1) == "prop" && list.size() == 4) {
+            if (pUsers->userExists(list.value(2))) {
+                bool ok;
+                quint32 prop = list.value(3).toInt(&ok, 16);
+                if (ok && pUsers->userChangeProperties(list.value(2), prop))
+                    std::cout << "Changed property from user " << list.value(2).toStdString() << std::endl;
+                else
+                    std::cout << QString("Error changing property %2 from user %1").arg(list.value(3), list.value(2)).toStdString();
+                return 0;
+            } else {
+                std::cout << "User " << list.value(2).toStdString() << " does not exist" << std::endl;
+            }*/
+        if (list.value(1) == "show" && list.size() == 2)
+            return pGames->showAllGames();
+
+        return ShowGamesCommandHelp();
+    }
+
+    static int runReadCommand(const QString &cmd, GlobalData *pData)
+    {
+        QStringList list = cmd.split(' ');
+
+        if (list.size() != 2 || list.value(0) != "read")
+            return ShowReadCommandHelp();
+
+
+        ReadDataCSV csv(pData);
+        return csv.readNewCSVData(list.value(1));
+    }
+
 private:
     static int ShowUserCommandHelp()
     {
@@ -84,6 +135,34 @@ private:
         return 0;
     }
 
+    static int ShowGamesCommandHelp()
+    {
+        std::cout << "Games functions - Usage\n\n";
+
+//        std::cout << "add %NAME%\t\t"
+//                  << "add a new user" << std::endl;
+//        std::cout << "remove %NAME%\t\t"
+//                  << "remove a user" << std::endl;
+//        std::cout << "change %NAME% %PASSW%\t"
+//                  << "change password a user" << std::endl;
+//        std::cout << "prop %NAME% %PROP%\t"
+//                  << "change property a user" << std::endl;
+        std::cout << "show\t\t\t"
+                  << "show all games" << std::endl;
+
+        return 0;
+    }
+
+    static int ShowReadCommandHelp()
+    {
+        std::cout << "Read functions - Usage\n\n";
+
+        std::cout << "%PATH%\t\t\t"
+                  << "file path to a csv file" << std::endl;
+
+        return 0;
+    }
+
 };
 
 #endif // USERCOMMAND_H
diff --git a/StFaeKSC/Network/udpdataserver.cpp b/StFaeKSC/Network/udpdataserver.cpp
index 4744df7..8202b75 100644
--- a/StFaeKSC/Network/udpdataserver.cpp
+++ b/StFaeKSC/Network/udpdataserver.cpp
@@ -117,6 +117,10 @@ MessageProtocol *UdpDataServer::checkNewMessage(MessageProtocol *msg)
             ack = this->m_pDataConnection->requestGetProgramVersion(msg);
             break;
 
+        case OP_CODE_CMD_REQ::REQ_GET_GAMES_LIST:
+            ack = this->m_pDataConnection->requestGetGamesList(msg);
+            break;
+
         default:
             qWarning().noquote() << QString("Unkown command %1").arg(msg->getIndex());
             break;
diff --git a/StFaeKSC/StFaeKSC.pro b/StFaeKSC/StFaeKSC.pro
index 91b2382..bdc2e71 100644
--- a/StFaeKSC/StFaeKSC.pro
+++ b/StFaeKSC/StFaeKSC.pro
@@ -17,12 +17,14 @@ SOURCES += main.cpp \
     ../Common/Network/messageprotocol.cpp \
     ../Common/Network/messagecommand.cpp \
     General/globaldata.cpp \
-    General/listeduser.cpp \
     General/console.cpp \
     Network/udpdataserver.cpp \
     ../Common/General/logging.cpp \
     ../Common/General/globalfunctions.cpp \
-    General/dataconnection.cpp
+    General/dataconnection.cpp \
+    Data/listeduser.cpp \
+    Data/games.cpp \
+    Data/readdatacsv.cpp
 
 HEADERS += \
     ../Common/General/backgroundcontroller.h \
@@ -34,14 +36,16 @@ HEADERS += \
     ../Common/General/globaltiming.h \
     ../Common/Network/messagecommand.h \
     General/globaldata.h \
-    General/listeduser.h \
     ../Common/General/globalfunctions.h \
     General/console.h \
     General/usercommand.h \
     Network/udpdataserver.h \
     Network/connectiondata.h \
     ../Common/General/logging.h \
-    General/dataconnection.h
+    General/dataconnection.h \
+    Data/listeduser.h \
+    Data/games.h \
+    Data/readdatacsv.h
 
 
 unix {
diff --git a/StamOrga/Android/StamOrga.pro b/StamOrga/Android/StamOrga.pro
index 9736dec..d1c4071 100644
--- a/StamOrga/Android/StamOrga.pro
+++ b/StamOrga/Android/StamOrga.pro
@@ -11,10 +11,10 @@ SOURCES += main.cpp \
     ../../Common/Network/messagebuffer.cpp \
     ../../Common/Network/messagecommand.cpp \
     ../../Common/Network/messageprotocol.cpp \
-    ../globaldata.cpp \
     ../../Common/General/globalfunctions.cpp \
     ../dataconnection.cpp \
-    ../datahandling.cpp
+    ../datahandling.cpp \
+    ../Data/globaldata.cpp
 
 RESOURCES += qml.qrc
 
@@ -51,10 +51,10 @@ HEADERS += \
     ../../Common/Network/messagebuffer.h \
     ../../Common/Network/messagecommand.h \
     ../../Common/Network/messageprotocol.h \
-    ../globaldata.h \
     ../../Common/General/globalfunctions.h \
     ../dataconnection.h \
-    ../datahandling.h
+    ../datahandling.h \
+    ../Data/globaldata.h
 
 DISTFILES += \
     android/AndroidManifest.xml \
diff --git a/StamOrga/Android/components/Games.qml b/StamOrga/Android/components/Games.qml
new file mode 100644
index 0000000..b378133
--- /dev/null
+++ b/StamOrga/Android/components/Games.qml
@@ -0,0 +1,38 @@
+import QtQuick 2.7
+import QtQuick.Controls 2.1
+import QtQuick.Layouts 1.0
+
+
+
+Rectangle {
+    id: mainRectangle
+    property alias textItem: labelLine1.text
+
+    width: parent.width
+//    width: 100
+    height: 50
+    color: "red"
+//    Layout.alignment: Qt.AlignHCenter | Qt.AlignVCenter
+    ColumnLayout {
+        id: columnLayout
+        width: mainRectangle.width
+        spacing: 3
+        Label {
+            id: labelLine1
+            text: qsTr("Benutzername")
+            Layout.alignment: Qt.AlignHCenter | Qt.AlignVCenter
+        }
+
+        Label {
+            id: labelLine2
+            text: qsTr("Benutzername")
+            Layout.alignment: Qt.AlignHCenter | Qt.AlignVCenter
+        }
+    }
+
+    function showGamesInfo() {
+        console.log("Inside Games")
+    }
+}
+
+
diff --git a/StamOrga/Android/images/+material/refresh.png b/StamOrga/Android/images/+material/refresh.png
new file mode 100644
index 0000000000000000000000000000000000000000..be9c3eef5abb8a90d1929834b137f96a99a9482e
GIT binary patch
literal 682
zcmV;b0#*HqP)<h;3K|Lk000e1NJLTq001Na001Ni1^@s6;Q*MJ00001b5ch_0Itp)
z=>Px#1ZP1_K>z@;j|==^1poj532;bRa{vGi!vFvd!vV){sAK>D02p*dSaefwW^{L9
za%BK;VQFr3E^cLXAT%y8E;Eegmrwuz0vkz0K~z{r&DXt398nm?aSNkGf?%Z(G)Au>
zNYHz*uu4qC(juinwDRLNQl$~KunOjjK<*&~0_ptfL@*YLX8k|Q961@EIXeRjColYP
zd3<N~?97?7XM0+$)_=u@IoU8L8|GxgoNSnr4Qm+3D!$+tSGdLrzC!<d3U{omo2<=-
z33`)V+@MpbXA4gdpJM~6IJ;xR3a@d2rge@N&^b006jeTdn+=U+#Pt^+Fb7?=2k6CE
zk$pnBJ{NyOx%a6xAYGZbe&88gZ)_UBQC04kjsw!Ck8hJE>_fO-XAp;Q<@!4gXa}Km
zWtt2|;yF_;*Pk4a9_{cnY0lKSO|kGaRh2s?IUubip)`SAPZg~*oyr}T9FP{hP<nD)
zkF$n4<&I4bNGout)T-N6HZ17tAe7b_*VA=2EW`uqgX`%!8y1cbN>7~Y={g%0;z|7q
zuBV9wgxZ7aNe*ZQq4wc=nutH(8@Qh2fb>NfZ!;$0`s$cMD9z0wxW43oWE-J=;t^b5
z$^d>L)H}GoHXBB?x%z`p-_T@G8q9ZuI>j(tZ<`HEv`WXNEA<?%H>TSZUm4y08Mxj%
zHZ+z{u8)|<1p1-1O0SibH)#5DUW7aMKWtdxCA1xFT4$JrJLf$%Oc;eW?sYc#`W5mX
zkKxW`*{}vpcI~ruYYuQ(&}*$(Z!rRQY?2LgvSCg(%*lp1*)S&?=F{rA1+{$ny_$C=
Q-v9sr07*qoM6N<$g5iuLl>h($

literal 0
HcmV?d00001

diff --git a/StamOrga/Android/images/refresh.png b/StamOrga/Android/images/refresh.png
new file mode 100644
index 0000000000000000000000000000000000000000..9d94c39c84a55c5b7bcc9de206cc0099d173fece
GIT binary patch
literal 391
zcmV;20eJq2P)<h;3K|Lk000e1NJLTq001Na001Ni1ONa4O9@aD0003_Nkl<ZcmeIy
zKTASk6vy%JkTxViQ$f`A>T8gQdJhdvbxRr>8VkuO^=&k@NHsKxnG*CKA_&?n+aj<A
z#oH4c&JcG0JYkdgIl~>!@#lG-;bF{7WGK?4L!SY!v?${8Qwa+$m-v{W@~Pqg0A&oZ
zcKO7FRF^HFf{70*=uf_=;o*{CiZmV#jMj~QqqotadvXk0=SjP<L9QOE#SB5_c(x0=
z&~1WapklXC24C(bN3b%+E~qH&8o^2!+n}bjJ%XHI?1MVeb{Sb;f)f7~lw@Qt5|m+7
zdf7X~*^{{|LLJLM-SQ6)2$j~SV}&SdGSg?C2<I~NK#DN4Jj%=|ksLl`?3PqW%$@Y#
zSRjUn(XCd0A4<3J*}%dfM(dh9S*A&nB~Jr=@Yu)FHeF0ey|alumZ=6j{sYcf<j))m
lG-%VKN1HlFEHPFlz5(%^*bF3@P)7g&002ovPDHLkV1jr2sLlWY

literal 0
HcmV?d00001

diff --git a/StamOrga/Android/main.cpp b/StamOrga/Android/main.cpp
index b3621eb..4a988ce 100755
--- a/StamOrga/Android/main.cpp
+++ b/StamOrga/Android/main.cpp
@@ -3,11 +3,12 @@
 #include <QtQml/QQmlContext>
 #include <QtCore/QSettings>
 #include <QtCore/QMetaObject>
+#include <QtCore/QDateTime>
 
 
 #include "userinterface.h"
 #include "../../Common/General/globalfunctions.h"
-#include "../globaldata.h"
+#include "../Data/globaldata.h"
 
 int main(int argc, char *argv[])
 {
@@ -23,7 +24,7 @@ int main(int argc, char *argv[])
     // global data class
     GlobalData globalUserData;
 
-    // engine to start qml display
+    // engine to start qml display -> takes about half a second
     QQmlApplicationEngine engine;
     engine.rootContext()->setContextProperty("globalUserData", &globalUserData);
     engine.load(QUrl(QLatin1String("qrc:/main.qml")));
@@ -41,12 +42,11 @@ int main(int argc, char *argv[])
 #endif
 
     QObject *pRootObject = engine.rootObjects().first();
-    QMetaObject::invokeMethod(pRootObject, "openUserLogin");
+    if (globalUserData.userName().size() == 0)
+        QMetaObject::invokeMethod(pRootObject, "openUserLogin", Q_ARG(QVariant, true));
+    else
+        QMetaObject::invokeMethod(pRootObject, "openUserLogin", Q_ARG(QVariant, false));
 
-//    if (globalUserData.userName().size() == 0) {
-
-
-//    }
 
     return app.exec();
 }
diff --git a/StamOrga/Android/main.qml b/StamOrga/Android/main.qml
index 157543f..a1bc89d 100644
--- a/StamOrga/Android/main.qml
+++ b/StamOrga/Android/main.qml
@@ -1,9 +1,12 @@
 import QtQuick 2.7
-import QtQuick.Controls 2.0
+import QtQuick.Controls 2.1
 import QtQuick.Layouts 1.0
 
 import com.watermax.demo 1.0
 
+import "pages" as MyPages
+import "components" as MyComponents
+
 ApplicationWindow {
     id: window
     visible: true
@@ -12,8 +15,7 @@ ApplicationWindow {
     title: qsTr("StamOrga")
 
     onClosing: {
-//        if( UserInterface.isDeviceMobile && stackView.depth > 1){
-        if(stackView.depth > 1){
+        if( userInt.isDeviceMobile() && stackView.depth > 1){
             close.accepted = false
             stackView.pop();
             listView.currentIndex = -1
@@ -64,6 +66,24 @@ ApplicationWindow {
                 verticalAlignment: Qt.AlignVCenter
                 Layout.fillWidth: true
             }
+
+            ToolButton {
+                contentItem: Image {
+                    fillMode: Image.Pad
+                    horizontalAlignment: Image.AlignHCenter
+                    verticalAlignment: Image.AlignVCenter
+                    source:  "images/refresh.png"
+                    visible: stackView.depth > 1 ? false : true
+                }
+                onClicked: {
+
+                    if (userInt.startMainConnection(globalUserData.userName, globalUserData.passWord) > 0) {
+                        busyLoadingIndicator.visible = true
+                        txtInfoLoading.text = "Verbinde"
+                        txtInfoLoading.visible = true
+                    }
+                }
+            }
         }
     }
 
@@ -104,13 +124,114 @@ ApplicationWindow {
         anchors.fill: parent
 
         initialItem: Pane {
-            id: pane
+            id: mainPane
+            width: parent.width
+
+            ColumnLayout {
+                id: mainColumnLayout
+                anchors.right: parent.right
+                anchors.left: parent.left
+                width: parent.width
+                ColumnLayout {
+                    id: columnLayoutBusyInfo
+                    spacing: 5
+                    Layout.alignment: Qt.AlignHCenter | Qt.AlignVCenter
+
+                    BusyIndicator {
+                        id: busyLoadingIndicator
+                        visible: false
+                        Layout.alignment: Qt.AlignHCenter | Qt.AlignVCenter
+                    }
+
+                    Label {
+                        id: txtInfoLoading
+                        visible: false
+                        Layout.alignment: Qt.AlignHCenter | Qt.AlignVCenter
+                    }
+                }
+                ColumnLayout {
+                    id: columnLayoutGames
+                    anchors.right: parent.right
+                    anchors.left: parent.left
+                    width: parent.width
+                    spacing: 10
+                    Layout.alignment: Qt.AlignHCenter | Qt.AlignVCenter
+                }
+            }
+        }
+    }
+
+    Component {
+        id: viewUserLogin
+
+        MyPages.UserLogin {}
+    }
+
+    Component {
+        id: gameView
+
+        MyComponents.Games {}
+    }
+
+
+    UserInterface {
+        id: userInt
+        globalData: globalUserData
+        onNotifyConnectionFinished : {
+            console.log("UserLogin return value: " + result)
+            if (result === 1) {
+                userInt.startGettingGamesList()
+                txtInfoLoading.text = "Lade Spielliste"
+            } else {
+                busyLoadingIndicator.visible = false
+                if (result === -3)
+                    txtInfoLoading.text = "Fehler: keine Verbindung"
+                else
+                    txtInfoLoading.text = "Benutzerdaten fehlerhaft"
+            }
+        }
+        onNotifyGamesListFinished : {
+            busyLoadingIndicator.visible = false
+            if (result === 1) {
+                txtInfoLoading.visible = false
+
+                showListedGames()
+//                var component = Qt.createComponent(MyComponents.Games);
+
+//                if (sprite == null)
+//                    console.log("Error creating object")
+//                else
+//                    console.log("Success")
+
+            } else {
+                txtInfoLoading.text = "Fehler beim Lesen der Daten: " + result
+            }
+        }
+    }
+
+
+
+    function openUserLogin(open) {
+        if (open === true) {
+            listView.currentIndex = 0
+            stackView.push(viewUserLogin);
         }
+        showListedGames()
     }
 
-    function openUserLogin() {
-        listView.currentIndex = 0
-        stackView.push("qrc:/pages/UserLogin.qml")
+    function showListedGames() {
+        var test = globalUserData.getGamePlay()
+        console.log("number of games = " + test.size())
+        var sprite1 = gameView.createObject(columnLayoutGames)//, {"x":100, "y": 100});
+        sprite1.textItem = "Hallo1"
+        sprite1.showGamesInfo()
+        var sprite2 = gameView.createObject(columnLayoutGames)//, {"x":100, "y": 200});
+        sprite2.textItem = "Hallo2"
+        var sprite3 = gameView.createObject(columnLayoutGames)//, {"x":100, "y": 300});
+        sprite3.textItem = "Hallo3"
+        var sprite4 = gameView.createObject(columnLayoutGames)//, {"x":100, "y": 300});
+        sprite4.textItem = "Hallo4"
+        console.log("Width = " + sprite1.width + " " + sprite2.width + " " + sprite3.width)
     }
 }
 
diff --git a/StamOrga/Android/pages/UserLogin.qml b/StamOrga/Android/pages/UserLogin.qml
index c0f127e..b05861b 100644
--- a/StamOrga/Android/pages/UserLogin.qml
+++ b/StamOrga/Android/pages/UserLogin.qml
@@ -6,7 +6,7 @@ import com.watermax.demo 1.0
 
 Flickable {
     id: flickable
-    width: parent.width
+//    width: parent.width
     contentHeight: pane.height
 
     Pane {
@@ -27,7 +27,7 @@ Flickable {
                 implicitWidth: mainColumnLayout.width / 3 * 2
                 Layout.alignment: Qt.AlignHCenter | Qt.AlignVCenter
                 placeholderText: qsTr("Text Field")
-                visible: userInt.isDebuggingEnabled()
+                visible: userIntUser.isDebuggingEnabled()
             }
 
 //            SpinBox {
@@ -114,10 +114,10 @@ Flickable {
                 Layout.alignment: Qt.AlignHCenter | Qt.AlignVCenter
                 transformOrigin: Item.Center
                 onClicked: {
-                    if (userInt.isDebuggingEnabled())
+                    if (userIntUser.isDebuggingEnabled())
                         globalUserData.ipAddr = txtIPAddress.text
 //                    globalUserData.conPort = spBoxPort.value
-                    if (userInt.startSendingData(txtUserName.text, txtPassWord.text) > 0) {
+                    if (userIntUser.startMainConnection(txtUserName.text, txtPassWord.text) > 0) {
                         btnSendData.enabled = false
                         busyConnectIndicator.visible = true;
                         txtInfoConnecting.text = "Verbinde ..."
@@ -151,7 +151,7 @@ Flickable {
     }
 
     UserInterface {
-        id: userInt
+        id: userIntUser
         globalData: globalUserData
         onNotifyConnectionFinished : {
             btnSendData.enabled = true
@@ -205,7 +205,7 @@ Flickable {
                 labelPasswordTooShort.visible = true
                 changePassWordDialog.open()
             } else if (txtnewPassWord.text == txtnewPassWordReplay.text) {
-                userInt.startUpdateUserPassword(txtnewPassWord.text)
+                userIntUser.startUpdateUserPassword(txtnewPassWord.text)
                 busyConnectIndicator.visible = true;
                 txtInfoConnecting.visible = true;
                 txtInfoConnecting.text = "Ändere Passwort"
diff --git a/StamOrga/Android/pages/UserLoginForm.ui.qml b/StamOrga/Android/pages/UserLoginForm.ui.qml
index 4feb612..fab61f2 100644
--- a/StamOrga/Android/pages/UserLoginForm.ui.qml
+++ b/StamOrga/Android/pages/UserLoginForm.ui.qml
@@ -3,116 +3,38 @@ import QtQuick.Controls 2.0
 import QtQuick.Layouts 1.0
 import QtQuick.Extras 1.4
 import QtQuick.Window 2.2
-Item {
-    id: item1
-    property alias btnSendData: btnSendData
-    property alias txtIPAddress: txtIPAddress
-    property alias txtUserName: txtUserName
-    property alias spBoxPort: spBoxPort
-    property alias txtPassWord: txtPassWord
-    property alias txtInfoConnecting: txtInfoConnecting
-    property alias busyConnectIndicator: busyConnectIndicator
+
+import "../components" as MyComponents
+
+Pane {
+    id: mainPane
 
     ColumnLayout {
         id: mainColumnLayout
-        spacing: 35
-        anchors.bottom: parent.bottom
-        anchors.bottomMargin: 20
         anchors.right: parent.right
-        anchors.rightMargin: 0
         anchors.left: parent.left
-        anchors.leftMargin: 0
-        anchors.top: parent.top
-        anchors.topMargin: 20
-
-        TextField {
-            id: txtIPAddress
-            text: "140.80.61.57"
-            implicitWidth: 250
-            Layout.alignment: Qt.AlignHCenter | Qt.AlignVCenter
-            placeholderText: qsTr("Text Field")
-        }
-
-        SpinBox {
-            id: spBoxPort
-            to: 100000
-            from: 1
-            value: 55000
-            Layout.alignment: Qt.AlignHCenter | Qt.AlignVCenter
-        }
-
         ColumnLayout {
-            id: columnLayout2
+            id: columnLayoutBusyInfo
             spacing: 5
             Layout.alignment: Qt.AlignHCenter | Qt.AlignVCenter
 
-            Label {
-                id: label1
-                text: qsTr("Benutzername")
-                Layout.alignment: Qt.AlignHCenter | Qt.AlignVCenter
-            }
-
-            TextField {
-                id: txtUserName
-                text: qsTr("")
-                padding: 8
-                implicitWidth: 250
+            BusyIndicator {
+                id: busyLoadingIndicator
+                visible: true
                 Layout.alignment: Qt.AlignHCenter | Qt.AlignVCenter
             }
-        }
-
-        ColumnLayout {
-            id: columnLayout3
-            Layout.alignment: Qt.AlignHCenter | Qt.AlignVCenter
 
             Label {
-                id: label2
-                text: qsTr("Passwort")
+                id: txtInfoLoading
+                visible: true
                 Layout.alignment: Qt.AlignHCenter | Qt.AlignVCenter
             }
-
-            TextField {
-                id: txtPassWord
-                implicitWidth: 250
-                Layout.alignment: Qt.AlignHCenter | Qt.AlignVCenter
-            }
-        }
-
-        RowLayout {
-            id: rowLayout
-            Layout.alignment: Qt.AlignHCenter | Qt.AlignVCenter
-
-            Column {
-                id: space
-                width: 0
-                height: 81
-            }
-
-            ColumnLayout {
-                id: columnLayout
-                Layout.alignment: Qt.AlignHCenter | Qt.AlignVCenter
-
-                BusyIndicator {
-                    id: busyConnectIndicator
-                    opacity: 1
-                    visible: false
-                    Layout.alignment: Qt.AlignHCenter | Qt.AlignVCenter
-                }
-
-                Label {
-                    id: txtInfoConnecting
-                    text: qsTr("Label")
-                    visible: false
-                }
-            }
         }
+        ColumnLayout {
 
-        Button {
-            id: btnSendData
-            text: qsTr("Verbindung prüfen")
-            implicitWidth: 250
             Layout.alignment: Qt.AlignHCenter | Qt.AlignVCenter
-            transformOrigin: Item.Center
         }
     }
+
+
 }
diff --git a/StamOrga/Android/qml.qrc b/StamOrga/Android/qml.qrc
index d507fef..46c1653 100644
--- a/StamOrga/Android/qml.qrc
+++ b/StamOrga/Android/qml.qrc
@@ -39,5 +39,10 @@
         <file>images/qt-logo@3x.png</file>
         <file>images/qt-logo@4x.png</file>
         <file>pages/UserLogin.qml</file>
+        <file>images/+material/refresh.png</file>
+        <file>images/refresh.png</file>
+        <file>userinterface.h</file>
+        <file>components/Games.qml</file>
+        <file>pages/UserLoginForm.ui.qml</file>
     </qresource>
 </RCC>
diff --git a/StamOrga/Android/userinterface.cpp b/StamOrga/Android/userinterface.cpp
index b70ba96..6e6d1f5 100644
--- a/StamOrga/Android/userinterface.cpp
+++ b/StamOrga/Android/userinterface.cpp
@@ -11,9 +11,11 @@ UserInterface::UserInterface(QObject *parent) : QObject(parent)
             this, &UserInterface::slVersionRequestFinished);
     connect(this->m_pConHandle, &ConnectionHandling::sNotifyUpdatePasswordRequest,
             this, &UserInterface::slUpdatePasswordRequestFinished);
+    connect(this->m_pConHandle, &ConnectionHandling::sNotifyGamesListRequest,
+            this, &UserInterface::slGettingGamesListFinished);
 }
 
-qint32 UserInterface::startSendingData(QString name, QString passw)
+qint32 UserInterface::startMainConnection(QString name, QString passw)
 {
     this->m_pConHandle->setGlobalData(this->m_pGlobalData);
 
@@ -22,16 +24,20 @@ qint32 UserInterface::startSendingData(QString name, QString passw)
 
 qint32 UserInterface::startUpdateUserPassword(QString newPassw)
 {
-    if (this->m_pConHandle->startUpdatePassword(newPassw))
-        return ERROR_CODE_SUCCESS;
-    return ERROR_CODE_COMMON;
+    return this->m_pConHandle->startUpdatePassword(newPassw);
+}
+
+qint32 UserInterface::startGettingGamesList()
+{
+    return this->m_pConHandle->startGettingGamesList();
 }
 
 void UserInterface::slConnectionRequestFinished(qint32 result)
 {
     //this->ui->btnSendData->setEnabled(true);
     emit this->notifyConnectionFinished(result);
-    this->m_pConHandle->startGettingInfo();
+    this->m_pConHandle->startGettingVersionInfo();
+    this->m_pConHandle->startGettingUserProps();
 }
 
 void UserInterface::slVersionRequestFinished(qint32 result, QString msg)
@@ -44,3 +50,8 @@ void UserInterface::slUpdatePasswordRequestFinished(qint32 result, QString newPa
 {
     emit this->notifyUpdatePasswordRequestFinished(result, newPassWord);
 }
+
+void UserInterface::slGettingGamesListFinished(qint32 result)
+{
+    emit this->notifyGamesListFinished(result);
+}
diff --git a/StamOrga/Android/userinterface.h b/StamOrga/Android/userinterface.h
index 6036110..3b96797 100644
--- a/StamOrga/Android/userinterface.h
+++ b/StamOrga/Android/userinterface.h
@@ -4,7 +4,7 @@
 #include <QtCore/QObject>
 
 #include "../connectionhandling.h"
-#include "../globaldata.h"
+#include "../Data/globaldata.h"
 
 class UserInterface : public QObject
 {
@@ -17,7 +17,9 @@ class UserInterface : public QObject
 public:
     explicit UserInterface(QObject *parent = 0);
 
-    Q_INVOKABLE qint32 startSendingData(QString name, QString passw);
+    Q_INVOKABLE qint32 startMainConnection(QString name, QString passw);
+
+    Q_INVOKABLE qint32 startGettingGamesList();
 
     Q_INVOKABLE qint32 startUpdateUserPassword(QString newPassw);
 
@@ -46,11 +48,13 @@ signals:
     void notifyConnectionFinished(qint32 result);
     void notifyVersionRequestFinished(qint32 result, QString msg);
     void notifyUpdatePasswordRequestFinished(qint32 result, QString newPassWord);
+    void notifyGamesListFinished(qint32 result);
 
 public slots:
     void slConnectionRequestFinished(qint32 result);
     void slVersionRequestFinished(qint32 result, QString msg);
     void slUpdatePasswordRequestFinished(qint32 result, QString newPassWord);
+    void slGettingGamesListFinished(qint32 result);
 
 
 private:
diff --git a/StamOrga/ConnectionHandling.cpp b/StamOrga/ConnectionHandling.cpp
index f42ac93..c775695 100644
--- a/StamOrga/ConnectionHandling.cpp
+++ b/StamOrga/ConnectionHandling.cpp
@@ -56,9 +56,14 @@ qint32 ConnectionHandling::startMainConnection(QString name, QString passw)
     return ERROR_CODE_SUCCESS;
 }
 
-qint32 ConnectionHandling::startGettingInfo()
+qint32 ConnectionHandling::startGettingVersionInfo()
 {
     this->sendVersionRequest();
+    return ERROR_CODE_SUCCESS;
+}
+
+qint32 ConnectionHandling::startGettingUserProps()
+{
     this->sendUserPropertiesRequest();
     return ERROR_CODE_SUCCESS;
 }
@@ -69,6 +74,12 @@ bool ConnectionHandling::startUpdatePassword(QString newPassWord)
     return true;
 }
 
+qint32 ConnectionHandling::startGettingGamesList()
+{
+    this->sendGamesListRequest();
+    return ERROR_CODE_SUCCESS;
+}
+
 /*
  * Answer function after connection with username
  */
@@ -182,8 +193,7 @@ void ConnectionHandling::sendUpdatePasswordRequest(QString newPassWord)
 
 void ConnectionHandling::slDataConUpdPassFinished(qint32 result, QString newPassWord)
 {
-    this->startDataConnection();                        // call it every time, if it is already started it just returns
-    connect(this->m_pDataCon, &DataConnection::notifyUpdPassRequest,
+    disconnect(this->m_pDataCon, &DataConnection::notifyUpdPassRequest,
             this, &ConnectionHandling::slDataConUpdPassFinished);
 
     if (result == ERROR_CODE_SUCCESS) {
@@ -195,6 +205,27 @@ void ConnectionHandling::slDataConUpdPassFinished(qint32 result, QString newPass
     this->checkTimeoutResult(result);
 }
 
+/*
+ * Functions for getting Games list
+ */
+void ConnectionHandling::sendGamesListRequest()
+{
+    this->startDataConnection();
+    connect(this->m_pDataCon, &DataConnection::notifyGamesListRequest,
+            this, &ConnectionHandling::slDataConGamesListFinished);
+
+    emit this->sStartSendGamesListRequest();
+}
+
+void ConnectionHandling::slDataConGamesListFinished(qint32 result)
+{
+    disconnect(this->m_pDataCon, &DataConnection::notifyGamesListRequest,
+            this, &ConnectionHandling::slDataConGamesListFinished);
+
+    emit this->sNotifyGamesListRequest(result);
+    this->checkTimeoutResult(result);
+}
+
 
 void ConnectionHandling::checkTimeoutResult(qint32 result)
 {
@@ -221,6 +252,8 @@ void ConnectionHandling::startDataConnection()
             this->m_pDataCon, &DataConnection::startSendUserPropsRequest);
     connect(this, &ConnectionHandling::sStartSendUpdatePasswordRequest,
             this->m_pDataCon, &DataConnection::startSendUpdPassRequest);
+    connect(this, &ConnectionHandling::sStartSendGamesListRequest,
+            this->m_pDataCon, &DataConnection::startSendGamesListRequest);
 
     this->m_ctrlDataCon.Start(this->m_pDataCon, false);
 }
@@ -240,6 +273,8 @@ void ConnectionHandling::stopDataConnection()
             this->m_pDataCon, &DataConnection::startSendUserPropsRequest);
     disconnect(this, &ConnectionHandling::sStartSendUpdatePasswordRequest,
             this->m_pDataCon, &DataConnection::startSendUpdPassRequest);
+    disconnect(this, &ConnectionHandling::sStartSendGamesListRequest,
+            this->m_pDataCon, &DataConnection::startSendGamesListRequest);
 
     this->m_ctrlDataCon.Stop();
 }
diff --git a/StamOrga/Data/globaldata.cpp b/StamOrga/Data/globaldata.cpp
new file mode 100644
index 0000000..84db6b3
--- /dev/null
+++ b/StamOrga/Data/globaldata.cpp
@@ -0,0 +1,78 @@
+#include <QtGui/QGuiApplication>
+#include <QtCore/QDebug>
+
+
+#include "globaldata.h"
+
+GlobalData::GlobalData(QObject *parent) : QObject(parent)
+{
+    QGuiApplication::setOrganizationName("WaterMax");
+    QGuiApplication::setApplicationName("StamOrga");
+    this->setbIsConnected(false);
+    this->uUserProperties = 0x0;
+
+    int tmp = QHostInfo::lookupHost("watermax83.ddns.net", this, SLOT(callBackLookUpHost(QHostInfo)));
+}
+
+void GlobalData::loadGlobalSettings()
+{
+    this->m_pMainUserSettings = new QSettings();
+
+    this->m_pMainUserSettings->beginGroup("USER_LOGIN");
+
+    this->setUserName(this->m_pMainUserSettings->value("UserName", "").toString());
+    this->setPassWord(this->m_pMainUserSettings->value("Password", "").toString());
+    this->setIpAddr(this->m_pMainUserSettings->value("IPAddress", "140.80.61.57").toString());
+    this->setConMasterPort(this->m_pMainUserSettings->value("ConMasterPort", 55000).toInt());
+
+    this->m_pMainUserSettings->endGroup();
+}
+
+void GlobalData::saveGlobalUserSettings()
+{
+    this->m_pMainUserSettings->beginGroup("USER_LOGIN");
+
+    this->m_pMainUserSettings->setValue("UserName", this->userName());
+    this->m_pMainUserSettings->setValue("Password", this->passWord());
+    this->m_pMainUserSettings->setValue("IPAddress", this->ipAddr());
+    this->m_pMainUserSettings->setValue("ConMasterPort", this->conMasterPort());
+
+    this->m_pMainUserSettings->endGroup();
+
+    this->m_pMainUserSettings->sync();
+
+}
+
+void GlobalData::addNewGamePlay(const GamePlay &gPlay)
+{
+    if (!this->existGamePlay(gPlay)) {
+        QMutexLocker lock(&this->m_mutexGame);
+//        qDebug() << QString("Add new game play %1:%2 = %3 for %4 - %5").arg(gPlay.home, gPlay.away, gPlay.score, gPlay.index, gPlay.comp);
+        this->m_lGamePlay.append(gPlay);
+    }
+}
+
+bool GlobalData::existGamePlay(const GamePlay &gPlay)
+{
+    QMutexLocker lock(&this->m_mutexGame);
+
+    for(int i=0; i < this->m_lGamePlay.size(); i++) {
+        if (this->m_lGamePlay[i].index == gPlay.index &&
+            this->m_lGamePlay[i].comp == gPlay.comp &&
+            this->m_lGamePlay[i].timestamp == gPlay.timestamp)
+            return true;
+    }
+    return false;
+}
+
+void GlobalData::callBackLookUpHost(const QHostInfo &host)
+{
+#ifdef Q_OS_ANDROID
+    if (host.addresses().size() > 0)
+        this->setIpAddr(host.addresses().value(0).toString());
+#else
+    if (host.addresses().size() > 0)
+        qDebug().noquote() << QString("Getting host info ip: %1").arg(host.addresses().value(0).toString()) ;
+#endif
+
+}
diff --git a/StamOrga/Data/globaldata.h b/StamOrga/Data/globaldata.h
new file mode 100644
index 0000000..a9e50e1
--- /dev/null
+++ b/StamOrga/Data/globaldata.h
@@ -0,0 +1,135 @@
+#ifndef GLOBALDATA_H
+#define GLOBALDATA_H
+
+#include <QtCore/QObject>
+#include <QtCore/QSettings>
+#include <QtCore/QMutex>
+#include <QtCore/QList>
+#include <QtNetwork/QHostInfo>
+
+
+struct GamePlay{
+    QString home;
+    QString away;
+    QString score;
+    quint8 comp;
+    quint8 index;
+    qint64 timestamp;
+};
+
+class GlobalData : public QObject
+{
+    Q_OBJECT
+    Q_PROPERTY(QString userName READ userName WRITE setUserName NOTIFY userNameChanged)
+    Q_PROPERTY(QString passWord READ passWord WRITE setPassWord NOTIFY passWordChanged)
+    Q_PROPERTY(QString ipAddr READ ipAddr WRITE setIpAddr NOTIFY ipAddrChanged)
+    Q_PROPERTY(quint32 conMasterPort READ conMasterPort WRITE setConMasterPort NOTIFY conMasterPortChanged)
+    Q_PROPERTY(bool bIsConnected READ bIsConnected WRITE setbIsConnected NOTIFY bIsConnectedChanged)
+    Q_PROPERTY(QList<GamePlay> getGamePlay READ getGamePlay)
+public:
+    explicit GlobalData(QObject *parent = 0);
+
+    void loadGlobalSettings();
+
+    QString userName() { QMutexLocker lock(&this->m_mutexUser); return this->m_userName; }
+    void setUserName(const QString &user)
+    {
+        QMutexLocker lock(&this->m_mutexUser);
+        if (this->m_userName != user) {
+            this->m_userName = user;
+            emit userNameChanged();
+        }
+    }
+
+    QString passWord() { QMutexLocker lock(&this->m_mutexUser); return this->m_passWord; }
+    void setPassWord(const QString &passw)
+    {
+        QMutexLocker lock(&this->m_mutexUser);
+        if (this->m_passWord != passw) {
+            this->m_passWord = passw;
+            emit passWordChanged();
+        }
+    }
+
+    QString ipAddr() { QMutexLocker lock(&this->m_mutexUser); return this->m_ipAddress; }
+    void setIpAddr(const QString &ip)
+    {
+        QMutexLocker lock(&this->m_mutexUser);
+        if (this->m_ipAddress != ip) {
+            this->m_ipAddress = ip;
+            emit ipAddrChanged();
+        }
+    }
+
+    quint32 conMasterPort() { QMutexLocker lock(&this->m_mutexUser); return this->m_uMasterPort; }
+    void setConMasterPort(quint32 port)
+    {
+        QMutexLocker lock(&this->m_mutexUser);
+        if (this->m_uMasterPort != port) {
+            this->m_uMasterPort = port;
+            emit conMasterPortChanged();
+        }
+    }
+
+    quint32 conDataPort() { QMutexLocker lock(&this->m_mutexUser); return this->m_uDataPort; }
+    void setConDataPort(quint32 port)
+    {
+        QMutexLocker lock(&this->m_mutexUser);
+        if (this->m_uDataPort != port) {
+            this->m_uDataPort = port;
+        }
+    }
+
+    bool bIsConnected() { return this->m_bIsConnected; }
+    void setbIsConnected(bool enable)
+    {
+        if (this->m_bIsConnected != enable) {
+            this->m_bIsConnected = enable;
+            emit this->bIsConnectedChanged();
+        }
+    }
+    quint32 uUserProperties;
+
+    void saveGlobalUserSettings();
+
+    void addNewGamePlay(const GamePlay &gPlay);
+
+    QList<GamePlay> getGamePlay() { return this->m_lGamePlay; }
+//    {
+//        if (index < this->m_lGamePlay.size())
+//            return this->m_lGamePlay.at(index);
+//        return GamePlay();
+//    }
+
+signals:
+    void userNameChanged();
+    void passWordChanged();
+    void ipAddrChanged();
+    void conMasterPortChanged();
+    void bIsConnectedChanged();
+
+public slots:
+
+private slots:
+    void callBackLookUpHost(const QHostInfo &host);
+
+private:
+    QString m_userName;
+    QString m_passWord;
+    QString m_ipAddress;
+    quint32 m_uMasterPort;
+
+    QMutex  m_mutexUser;
+    QMutex  m_mutexGame;
+
+    bool m_bIsConnected;
+
+    quint16 m_uDataPort;
+
+    QSettings *m_pMainUserSettings;
+
+    QList<GamePlay> m_lGamePlay;
+    bool existGamePlay(const GamePlay &gPlay);
+};
+
+#endif // GLOBALDATA_H
diff --git a/StamOrga/PC/mainwindow.cpp b/StamOrga/PC/mainwindow.cpp
index 6307d31..a6b7934 100755
--- a/StamOrga/PC/mainwindow.cpp
+++ b/StamOrga/PC/mainwindow.cpp
@@ -18,10 +18,16 @@ MainWindow::MainWindow(QWidget *parent) :
     SetMessagePattern();
 
     this->m_pConHandling = new ConnectionHandling();
-    connect(this->m_pConHandling, &ConnectionHandling::sNotifyConnectionFinished, this, &MainWindow::connectionFinished);
-    connect(this->m_pConHandling, &ConnectionHandling::sNotifyVersionRequest, this, &MainWindow::versionRequestFinished);
-    connect(this->m_pConHandling, &ConnectionHandling::sNotifyUserPropertiesRequest, this, &MainWindow::propertyRequestFinished);
-    connect(this->m_pConHandling, &ConnectionHandling::sNotifyUpdatePasswordRequest, this, &MainWindow::updatePasswordFinished);
+    connect(this->m_pConHandling, &ConnectionHandling::sNotifyConnectionFinished,
+            this, &MainWindow::connectionFinished);
+    connect(this->m_pConHandling, &ConnectionHandling::sNotifyVersionRequest,
+            this, &MainWindow::versionRequestFinished);
+    connect(this->m_pConHandling, &ConnectionHandling::sNotifyUserPropertiesRequest,
+            this, &MainWindow::propertyRequestFinished);
+    connect(this->m_pConHandling, &ConnectionHandling::sNotifyUpdatePasswordRequest,
+            this, &MainWindow::updatePasswordFinished);
+    connect(this->m_pConHandling, &ConnectionHandling::sNotifyGamesListRequest,
+            this, &MainWindow::getGamesListFinished);
 
     this->m_pGlobalData = new GlobalData();
     this->m_pGlobalData->loadGlobalSettings();
@@ -102,3 +108,13 @@ void MainWindow::updatePasswordFinished(qint32 result)
         this->ui->lEditTextUpdatePassword->setText(getErrorCodeString(result));
 }
 
+
+void MainWindow::on_btnGetGamesList_clicked()
+{
+    this->m_pConHandling->startGetGamesList();
+}
+
+void MainWindow::getGamesListFinished(qint32 result)
+{
+    qDebug() << QString("Getting Games list request answer: %1 ").arg(result);
+}
diff --git a/StamOrga/PC/mainwindow.h b/StamOrga/PC/mainwindow.h
index 22c85aa..a0d2329 100644
--- a/StamOrga/PC/mainwindow.h
+++ b/StamOrga/PC/mainwindow.h
@@ -24,9 +24,12 @@ private slots:
     void versionRequestFinished(qint32 result, QString msg);
     void propertyRequestFinished(qint32 result, quint32 value);
     void updatePasswordFinished(qint32 result);
+    void getGamesListFinished(qint32 result);
 
     void on_btnUdpatePassword_clicked();
 
+    void on_btnGetGamesList_clicked();
+
 private:
     Ui::MainWindow *ui;
 
diff --git a/StamOrga/PC/mainwindow.ui b/StamOrga/PC/mainwindow.ui
index a52d6c1..d927622 100755
--- a/StamOrga/PC/mainwindow.ui
+++ b/StamOrga/PC/mainwindow.ui
@@ -269,6 +269,22 @@
      <bool>false</bool>
     </property>
    </widget>
+   <widget class="QPushButton" name="btnGetGamesList">
+    <property name="geometry">
+     <rect>
+      <x>300</x>
+      <y>220</y>
+      <width>75</width>
+      <height>23</height>
+     </rect>
+    </property>
+    <property name="text">
+     <string>Games</string>
+    </property>
+    <property name="checkable">
+     <bool>false</bool>
+    </property>
+   </widget>
   </widget>
   <widget class="QMenuBar" name="menuBar">
    <property name="geometry">
diff --git a/StamOrga/connectionhandling.h b/StamOrga/connectionhandling.h
index 8ff4b86..eeb0a69 100644
--- a/StamOrga/connectionhandling.h
+++ b/StamOrga/connectionhandling.h
@@ -6,7 +6,7 @@
 
 #include "mainconnection.h"
 #include "dataconnection.h"
-#include "globaldata.h"
+#include "../Data/globaldata.h"
 #include "../Common/General/backgroundcontroller.h"
 
 
@@ -18,10 +18,13 @@ public:
     ~ConnectionHandling();
 
     qint32 startMainConnection(QString name, QString passw);
-    qint32 startGettingInfo();
+    qint32 startGettingVersionInfo();
+    qint32 startGettingUserProps();
+    qint32 startGettingGamesList();
 
     bool startUpdatePassword(QString newPassWord);
 
+
     void setGlobalData(GlobalData *pData)
     {
         if (pData != NULL)
@@ -35,11 +38,13 @@ signals:
     void sNotifyVersionRequest(qint32 result, QString msg);
     void sNotifyUserPropertiesRequest(qint32 result, quint32 value);
     void sNotifyUpdatePasswordRequest(qint32 result, QString newPassWord);
+    void sNotifyGamesListRequest(qint32 result);
 
     void sStartSendLoginRequest();
     void sStartSendVersionRequest();
     void sStartSendUserPropertiesRequest();
     void sStartSendUpdatePasswordRequest(QString newPassWord);
+    void sStartSendGamesListRequest();
 
 public slots:
 
@@ -49,6 +54,7 @@ private slots:
     void slDataConVersionFinished(qint32 result, QString msg);
     void slDataConUserPropsFinished(qint32 result, quint32 value);
     void slDataConUpdPassFinished(qint32 result, QString newPassWord);
+    void slDataConGamesListFinished(qint32 result);
 
     void slTimerConResetFired();
     void slTimerConLoginFired();
@@ -69,6 +75,7 @@ private:
     void sendVersionRequest();
     void sendUserPropertiesRequest();
     void sendUpdatePasswordRequest(QString newPassWord);
+    void sendGamesListRequest();
 
     void checkTimeoutResult(qint32 result);
 
diff --git a/StamOrga/dataconnection.cpp b/StamOrga/dataconnection.cpp
index 734a098..dc500e0 100644
--- a/StamOrga/dataconnection.cpp
+++ b/StamOrga/dataconnection.cpp
@@ -22,6 +22,8 @@ int DataConnection::DoBackgroundWork()
     this->m_pConTimeout->setInterval(3000);
     connect(this->m_pConTimeout, &QTimer::timeout, this, &DataConnection::connectionTimeoutFired);
 
+    this->m_pDataHandle = new DataHandling(this->m_pGlobalData);
+
     this->m_pDataUdpSocket = new QUdpSocket();
     if (!this->m_pDataUdpSocket->bind())
     {
@@ -74,20 +76,20 @@ void DataConnection::checkNewOncomingData()
                 this->m_bRequestLoginAgain = false;
             }
             else
-                emit this->notifyLoginRequest(this->m_dataHandle.getHandleLoginResponse(msg));
+                emit this->notifyLoginRequest(this->m_pDataHandle->getHandleLoginResponse(msg));
             break;
 
         case OP_CODE_CMD_RES::ACK_GET_VERSION:
         {
             QString version;
-            qint32 uVersion = this->m_dataHandle.getHandleVersionResponse(msg, &version);
+            qint32 uVersion = this->m_pDataHandle->getHandleVersionResponse(msg, &version);
             emit this->notifyVersionRequest(uVersion, version);
             break;
         }
         case OP_CODE_CMD_RES::ACK_GET_USER_PROPS:
         {
             quint32 props;
-            qint32 rValue = this->m_dataHandle.getHandleUserPropsResponse(msg, &props);
+            qint32 rValue = this->m_pDataHandle->getHandleUserPropsResponse(msg, &props);
             emit this->notifyUserPropsRequest(rValue, props);
             break;
         }
@@ -105,6 +107,12 @@ void DataConnection::checkNewOncomingData()
             }
             break;
 
+        case OP_CODE_CMD_RES::ACK_GET_GAMES_LIST:
+        {
+            qint32 result = this->m_pDataHandle->getHandleGamesListResponse(msg);
+            emit this->notifyGamesListRequest(result);
+            break;
+        }
         default:
             delete msg;
             continue;
@@ -122,7 +130,7 @@ void DataConnection::startSendLoginRequest()
     aPassw.append(this->m_pGlobalData->passWord());
     MessageProtocol msg(OP_CODE_CMD_REQ::REQ_LOGIN_USER, aPassw);
     if (this->sendMessageRequest(&msg) < 0)
-        emit this->notifyLoginRequest(ERROOR_CODE_ERR_SEND);
+        emit this->notifyLoginRequest(ERROR_CODE_ERR_SEND);
 }
 
 void DataConnection::startSendVersionRequest()
@@ -135,14 +143,14 @@ void DataConnection::startSendVersionRequest()
     version.append(QString(STAM_ORGA_VERSION_S));
     MessageProtocol msg(OP_CODE_CMD_REQ::REQ_GET_VERSION, version);
     if (this->sendMessageRequest(&msg) < 0)
-        emit this->notifyVersionRequest(ERROOR_CODE_ERR_SEND, "");
+        emit this->notifyVersionRequest(ERROR_CODE_ERR_SEND, "");
 }
 
 void DataConnection::startSendUserPropsRequest()
 {
     MessageProtocol msg(OP_CODE_CMD_REQ::REQ_GET_USER_PROPS);
     if (this->sendMessageRequest(&msg) < 0)
-        emit this->notifyUserPropsRequest(ERROOR_CODE_ERR_SEND, 0);
+        emit this->notifyUserPropsRequest(ERROR_CODE_ERR_SEND, 0);
 }
 
 void DataConnection::startSendUpdPassRequest(QString newPassWord)
@@ -160,7 +168,14 @@ void DataConnection::startSendUpdPassRequest(QString newPassWord)
     QVariant tmp(newPassWord);
     MessageProtocol msg(OP_CODE_CMD_REQ::REQ_USER_CHANGE_LOGIN, passReq);
     if (this->sendMessageRequest(&msg, &tmp) < 0)
-        emit this->notifyUpdPassRequest(ERROOR_CODE_ERR_SEND, "");
+        emit this->notifyUpdPassRequest(ERROR_CODE_ERR_SEND, "");
+}
+
+void DataConnection::startSendGamesListRequest()
+{
+    MessageProtocol msg(OP_CODE_CMD_REQ::REQ_GET_GAMES_LIST);
+    if (this->sendMessageRequest(&msg) < 0)
+        emit this->notifyGamesListRequest(ERROR_CODE_ERR_SEND);
 }
 
 void DataConnection::connectionTimeoutFired()
@@ -179,6 +194,9 @@ void DataConnection::connectionTimeoutFired()
         case OP_CODE_CMD_REQ::REQ_GET_USER_PROPS:
             emit this->notifyUserPropsRequest(ERROR_CODE_NO_ANSWER, 0);
             break;
+
+        case OP_CODE_CMD_REQ::REQ_GET_GAMES_LIST:
+            emit this->notifyGamesListRequest(ERROR_CODE_NO_ANSWER);
         }
         this->m_lActualRequest.removeLast();
     }
@@ -241,6 +259,10 @@ void DataConnection::sendActualRequestsAgain()
             this->startSendUpdPassRequest(this->m_lActualRequest[i].data.toString());
             break;
 
+        case OP_CODE_CMD_REQ::REQ_GET_GAMES_LIST:
+            this->startSendGamesListRequest();
+            break;
+
         default:
             continue;
         }
@@ -251,4 +273,7 @@ DataConnection::~DataConnection()
 {
     if (this->m_pDataUdpSocket != NULL)
         delete this->m_pDataUdpSocket;
+
+    if (this->m_pDataHandle != NULL)
+        delete this->m_pDataHandle;
 }
diff --git a/StamOrga/dataconnection.h b/StamOrga/dataconnection.h
index 03096ce..0d8387d 100644
--- a/StamOrga/dataconnection.h
+++ b/StamOrga/dataconnection.h
@@ -5,7 +5,7 @@
 #include <QtCore/QList>
 #include <QtNetwork/QUdpSocket>
 
-#include "globaldata.h"
+#include "../Data/globaldata.h"
 #include "datahandling.h"
 #include "../Common/General/backgroundworker.h"
 #include "../Common/Network/messagebuffer.h"
@@ -32,12 +32,14 @@ signals:
     void notifyVersionRequest(qint32 result, QString msg);
     void notifyUserPropsRequest(qint32 result, quint32 value);
     void notifyUpdPassRequest(qint32 result, QString passw);
+    void notifyGamesListRequest(qint32 result);
 
 public slots:
     void startSendLoginRequest();
     void startSendVersionRequest();
     void startSendUserPropsRequest();
     void startSendUpdPassRequest(QString newPassWord);
+    void startSendGamesListRequest();
 
 private slots:
     void connectionTimeoutFired();
@@ -46,7 +48,7 @@ private slots:
 private:
     GlobalData      *m_pGlobalData;
     MessageBuffer   m_messageBuffer;
-    DataHandling    m_dataHandle;
+    DataHandling    *m_pDataHandle;
 
     QTimer          *m_pConTimeout;
     QUdpSocket      *m_pDataUdpSocket = NULL;
diff --git a/StamOrga/datahandling.cpp b/StamOrga/datahandling.cpp
index 888ee70..4c8a8e2 100644
--- a/StamOrga/datahandling.cpp
+++ b/StamOrga/datahandling.cpp
@@ -4,13 +4,11 @@
 #include "../Common/General/globalfunctions.h"
 #include "../Common/General/config.h"
 
-DataHandling::DataHandling()
+DataHandling::DataHandling(GlobalData *pData)
 {
-
+    this->m_pGlobalData = pData;
 }
 
-
-
 qint32 DataHandling::getHandleLoginResponse(MessageProtocol *msg)
 {
     if (msg->getDataLength() != 4)
@@ -47,3 +45,62 @@ qint32 DataHandling::getHandleUserPropsResponse(MessageProtocol *msg, quint32 *p
     return rValue;
 }
 
+qint32 DataHandling::getHandleGamesListResponse(MessageProtocol *msg)
+{
+    if (msg->getDataLength() < 8)
+        return ERROR_CODE_WRONG_SIZE;
+
+    const char *pData = msg->getPointerToData();
+    qint32 rValue = qFromBigEndian(*((qint32 *)pData));
+
+    if (rValue != ERROR_CODE_SUCCESS)
+        return rValue;
+
+    quint32 totalSize = msg->getDataLength();
+    quint32 offset = 4;
+    quint16 totalPacks = qFromBigEndian(*(quint16 *)(pData + offset));
+
+    offset += 2;
+    while(offset < totalSize && totalPacks > 0) {
+        GamePlay play;
+        quint16 size = qFromBigEndian(*(qint16 *)(pData + offset));
+        offset += 2;
+
+        if (size <= 8) {
+            qWarning().noquote() << QString("Size is to small %1").arg(size);
+            break;
+        }
+
+        quint16 version = qFromBigEndian(*(qint16 *)(pData + offset));
+        if (version != 0x1) {
+            qWarning().noquote() << QString("Unknown game version %1").arg(version);
+            break;
+        }
+        offset += 2;
+        play.index = *(qint8 *)(pData + offset);
+        offset += 1;
+        play.comp = *(qint8 *)(pData + offset);
+        offset += 1;
+
+
+        play.timestamp = qFromBigEndian(*(qint64 *)(pData + offset));
+        offset += 8;
+
+        QString playString(QByteArray(pData + offset, size - 8));
+        offset += (size - 12);
+        QStringList lplayString = playString.split(";");
+
+        if (lplayString.size() > 0)
+            play.home = lplayString.value(0);
+        if (lplayString.size() > 1)
+            play.away = lplayString.value(1);
+        if (lplayString.size() > 2)
+            play.score = lplayString.value(2);
+
+        this->m_pGlobalData->addNewGamePlay(play);
+        totalPacks--;
+    }
+
+    return rValue;
+}
+
diff --git a/StamOrga/datahandling.h b/StamOrga/datahandling.h
index 8506d2b..291384a 100644
--- a/StamOrga/datahandling.h
+++ b/StamOrga/datahandling.h
@@ -3,16 +3,21 @@
 
 #include <QtCore/QString>
 
+#include "../Data/globaldata.h"
 #include "../Common/Network/messageprotocol.h"
 
 class DataHandling
 {
 public:
-    DataHandling();
+    DataHandling(GlobalData *pData);
 
     qint32 getHandleLoginResponse(MessageProtocol *msg);
     qint32 getHandleVersionResponse(MessageProtocol *msg, QString *version);
     qint32 getHandleUserPropsResponse(MessageProtocol *msg, quint32 *props);
+    qint32 getHandleGamesListResponse(MessageProtocol *msg);
+
+private:
+    GlobalData  *m_pGlobalData;
 };
 
 #endif // DATAHANDLING_H
diff --git a/StamOrga/globaldata.cpp b/StamOrga/globaldata.cpp
index 704441e..84db6b3 100644
--- a/StamOrga/globaldata.cpp
+++ b/StamOrga/globaldata.cpp
@@ -43,6 +43,28 @@ void GlobalData::saveGlobalUserSettings()
 
 }
 
+void GlobalData::addNewGamePlay(const GamePlay &gPlay)
+{
+    if (!this->existGamePlay(gPlay)) {
+        QMutexLocker lock(&this->m_mutexGame);
+//        qDebug() << QString("Add new game play %1:%2 = %3 for %4 - %5").arg(gPlay.home, gPlay.away, gPlay.score, gPlay.index, gPlay.comp);
+        this->m_lGamePlay.append(gPlay);
+    }
+}
+
+bool GlobalData::existGamePlay(const GamePlay &gPlay)
+{
+    QMutexLocker lock(&this->m_mutexGame);
+
+    for(int i=0; i < this->m_lGamePlay.size(); i++) {
+        if (this->m_lGamePlay[i].index == gPlay.index &&
+            this->m_lGamePlay[i].comp == gPlay.comp &&
+            this->m_lGamePlay[i].timestamp == gPlay.timestamp)
+            return true;
+    }
+    return false;
+}
+
 void GlobalData::callBackLookUpHost(const QHostInfo &host)
 {
 #ifdef Q_OS_ANDROID
diff --git a/StamOrga/globaldata.h b/StamOrga/globaldata.h
index 4ab40d6..e847090 100644
--- a/StamOrga/globaldata.h
+++ b/StamOrga/globaldata.h
@@ -3,8 +3,20 @@
 
 #include <QtCore/QObject>
 #include <QtCore/QSettings>
+#include <QtCore/QMutex>
+#include <QtCore/QList>
 #include <QtNetwork/QHostInfo>
 
+
+struct GamePlay{
+    QString home;
+    QString away;
+    QString score;
+    quint8 comp;
+    quint8 index;
+    qint64 timestamp;
+};
+
 class GlobalData : public QObject
 {
     Q_OBJECT
@@ -18,45 +30,50 @@ public:
 
     void loadGlobalSettings();
 
-    QString userName() { return this->m_userName; }
+    QString userName() { QMutexLocker lock(&this->m_mutexUser); return this->m_userName; }
     void setUserName(const QString &user)
     {
+        QMutexLocker lock(&this->m_mutexUser);
         if (this->m_userName != user) {
             this->m_userName = user;
             emit userNameChanged();
         }
     }
 
-    QString passWord() { return this->m_passWord; }
+    QString passWord() { QMutexLocker lock(&this->m_mutexUser); return this->m_passWord; }
     void setPassWord(const QString &passw)
     {
+        QMutexLocker lock(&this->m_mutexUser);
         if (this->m_passWord != passw) {
             this->m_passWord = passw;
             emit passWordChanged();
         }
     }
 
-    QString ipAddr() { return this->m_ipAddress; }
+    QString ipAddr() { QMutexLocker lock(&this->m_mutexUser); return this->m_ipAddress; }
     void setIpAddr(const QString &ip)
     {
+        QMutexLocker lock(&this->m_mutexUser);
         if (this->m_ipAddress != ip) {
             this->m_ipAddress = ip;
             emit ipAddrChanged();
         }
     }
 
-    quint32 conMasterPort() { return this->m_uMasterPort; }
+    quint32 conMasterPort() { QMutexLocker lock(&this->m_mutexUser); return this->m_uMasterPort; }
     void setConMasterPort(quint32 port)
     {
+        QMutexLocker lock(&this->m_mutexUser);
         if (this->m_uMasterPort != port) {
             this->m_uMasterPort = port;
             emit conMasterPortChanged();
         }
     }
 
-    quint32 conDataPort() { return this->m_uDataPort; }
+    quint32 conDataPort() { QMutexLocker lock(&this->m_mutexUser); return this->m_uDataPort; }
     void setConDataPort(quint32 port)
     {
+        QMutexLocker lock(&this->m_mutexUser);
         if (this->m_uDataPort != port) {
             this->m_uDataPort = port;
         }
@@ -74,6 +91,8 @@ public:
 
     void saveGlobalUserSettings();
 
+    void addNewGamePlay(const GamePlay &gPlay);
+
 signals:
     void userNameChanged();
     void passWordChanged();
@@ -92,11 +111,17 @@ private:
     QString m_ipAddress;
     quint32 m_uMasterPort;
 
+    QMutex  m_mutexUser;
+    QMutex  m_mutexGame;
+
     bool m_bIsConnected;
 
     quint16 m_uDataPort;
 
     QSettings *m_pMainUserSettings;
+
+    QList<GamePlay> m_lGamePlay;
+    bool existGamePlay(const GamePlay &gPlay);
 };
 
 #endif // GLOBALDATA_H
diff --git a/StamOrga/mainconnection.h b/StamOrga/mainconnection.h
index 2b15834..7853990 100644
--- a/StamOrga/mainconnection.h
+++ b/StamOrga/mainconnection.h
@@ -5,7 +5,7 @@
 #include <QtCore/QTimer>
 #include <QtNetwork/QUdpSocket>
 
-#include "globaldata.h"
+#include "../Data/globaldata.h"
 #include "../Common/General/backgroundworker.h"
 #include "../Common/Network/messagebuffer.h"
 
-- 
2.11.0

